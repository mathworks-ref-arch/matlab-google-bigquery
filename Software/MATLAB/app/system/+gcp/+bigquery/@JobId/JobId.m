classdef JobId < gcp.bigquery.Object
% JOBID Object to return the job identifier
%
% Usage
%
%      % Creating a unique and random JobId - type string
%      % Is used for creating the object JobId as shown below
%
%      jobIdstr = gcp.bigquery.JobId.createJobId();
%
%      % Examples of creating jobId 
%       
%      1. jobIdBuilder = newBuilder()
%         jobIdBuilder = jobIdBuilder.setLocation("location");
%         jobIdBuilder = jobIdBuilder.project("projectid");
%         jobId = jobIdBuilder.build;
%
%      2. jobId = gcp.bigquery.JobId.of()
%
%      3. jobId = gcp.bigquery.JobId.of(jobIdstr)
%
%      4. jobId = gcp.bigquery.JobId.of(projectId,jobIdstr)
%

%                 (c) 2020 MathWorks, Inc.
properties
end

methods
	%% Constructor 
	function obj = JobId(varargin)
        % Setting up Logger for this class
            logObj = Logger.getLogger();
            logObj.MsgPrefix = 'GCP:GBQ';
            
            if ~ (isa(varargin{1},'com.google.cloud.bigquery.JobId') || isa(varargin{1},'com.google.cloud.bigquery.AutoValue_JobId'))
                write(logObj,'error','JobId object creation failed');
            else
                obj.Handle = varargin{1};
            end
	end
end

methods(Static)
	function jobStr = createJobId(varargin)
        % returns unique string for creating JobId object
        %
		% ISO 8601 + millisecs
		prefixStr = 'job_';
		timestampStr = datestr(now,30);
		sep = '_';
		milliStr = datestr(now,'FFF');
		[~,tempStr] = fileparts(tempname);
		
		% Create and return an jobId
		jobStr = [prefixStr, timestampStr, sep, milliStr, sep, tempStr];
		
    end
    
    function jobId = of(varargin)
       import com.google.cloud.bigquery.*;
        
       % Setting logger
        logObj = Logger.getLogger();
        logObj.MsgPrefix = 'GCP:GBQ';
        
        % Different ways of creating a JobId for a batch job
         switch numel(varargin)
             
             case 0
                 % Creates a job identity with autogenerated id and no project specified.
                jobIdJ = javaMethod('of','com.google.cloud.bigquery.JobId');
                
             case 1
                 % Creates a job identity given only its user-defined id.
                 jobidstr = varargin{1};
                 jobIdJ = javaMethod('of','com.google.cloud.bigquery.JobId',jobidstr);
             
             case 2 
                 % Creates a job identity given project's and job's user-defined id.
                 projectid = varargin{1};
                 jobidstr = varargin{2};
                 
                 jobIdJ = javaMethod('of','com.google.cloud.bigquery.JobId',projectid,jobidstr);
             
                 % If you are getting project id errors it's possible your
                 % service account is not enabled to use the BigQuery API
             otherwise
                 
                  write(logObj,'error','Unexpected number of Input arguments');
         end
         
         % Wrap java object jobIdJ created above into a MATLAB object
         % gcp.bigquery.JobId using the constructor JobId()
         jobId = gcp.bigquery.JobId(jobIdJ);
         
    end
    
    function jobIdBuilder = newBuilder()
        
        % Create Builder class for JobId
        jobIdBuilderJ = javaMethod('newBuilder','com.google.cloud.bigquery.JobId');
        % Wrapping the Java class object into a MATLAB object jobIdBuilder
        jobIdBuilder = gcp.bigquery.JobId.Builder(jobIdBuilderJ);
    end
    
end

end %class

%%
% Reference: https://googleapis.dev/java/google-cloud-clients/latest/com/google/cloud/bigquery/JobId.html
%
% Java API - Supported methods
%
% static JobId	of()
% Creates a job identity with autogenerated id and no project specified.
% 
% static JobId	of(String job)
% Creates a job identity given only its user-defined id.
%
% static JobId	of(String project, String job)
% Creates a job identity given project's and job's user-defined id.